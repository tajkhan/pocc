#!/usr/bin/perl -w
## pocc-bin for pocc in /Users/pouchet
##
## Made by Louis-Noel Pouchet
## Contact: <louis-noel.pouchet@inria.fr>
##
## Started on  Tue Apr 14 17:43:47 2009 Louis-Noel Pouchet
## Last update Wed May 11 20:16:56 2011 Louis-Noel Pouchet
##
#
# pocc-util.in: this file is part of the PoCC project.
#
# PoCC, the Polyhedral Compiler Collection package
#
# Copyright (C) 2009 Louis-Noel Pouchet
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1
# of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING.LESSER' file in the root directory.
#
# Author:
# Louis-Noel Pouchet <Louis-Noel.Pouchet@inria.fr>
#

use Switch;

## Some global variables.
$BASEDIR = "@abs_top_srcdir@";
$INST_PREFIX = "@install_prefix@";

## Include command scripts.
do "$BASEDIR/bin/pocc-alternate";
do "$BASEDIR/bin/pocc-checkout";
do "$BASEDIR/bin/pocc-make";
do "$BASEDIR/bin/pocc-snapshot";
do "$BASEDIR/bin/pocc-versionsgenerator";

sub print_help
{
    print "Usage: pocc-util <command>\n";
    print "<command>: upgrade\n";
    print "<command>: alternate [configuration-name]\n";
    print "<command>: checkout [software-name]\n";
    print "<command>: make [software-name]\n";
    print "<command>: snapshot <svn|release> [mode]\n";
    print "<command>: buildall\n";
    print "<command>: generate-versions <options-file> <filename>\n";
    print "<command>: help\n";
}


# args: command line options
sub parse_args
{
    my $i;
    my @args = @_;
    if ($#args == -1) {
	print_help;
	exit 1;
    }
    for($i = 0; $i <= $#args; $i++) {
	switch ($args[$i]) {
	    case "help" { print_help; exit 1; }
	    case "alternate" {
		die "Missing argument\n" if ($i eq $#args);
		alternate($BASEDIR, $args[$i + 1]);
		checkout($BASEDIR, "all");
		make($BASEDIR, $INST_PREFIX, "all", "force");
		my $ret;
		if ($args[$i + 1] == "devel") {
		    $ret = system("cd $BASEDIR && CPPFLAGS=-DHAVE_POCC_DEVEL make install");
		}
		else {
		    $ret = system("cd $BASEDIR && make install");
		}
		die "[PoCC] fatal error\n" if ($ret != 0);
		$i = $#args;
	    }
	    case "checkout" {
		if ($i < $#args) {
		    checkout($BASEDIR, $args[$i + 1]);
		}
		else {
		    checkout($BASEDIR, "all");
		}
		$i = $#args;
	    }
	    case "make" {
		if ($i < $#args) {
		    make($BASEDIR, $INST_PREFIX, $args[$i + 1], "");
		}
		else {
		    make($BASEDIR, $INST_PREFIX, "all", "");
		}
		$i = $#args;
	    }
	    case "buildall" {
		make($BASEDIR, $INST_PREFIX, "all", "");
		my $ret = system ("cd $BASEDIR && make install");
		die "[PoCC] fatal error\n" if ($ret != 0);
		$i = $#args;
	    }
	    case "snapshot" {
		die "[PoCC] Missing argument to snapshot" if ($i == $#args);
		my $type = $args[$i + 1];
		my $mode = "base";
		$mode = $args[$i + 2] if ($i + 2 == $#args);
		snapshot($BASEDIR, $type, $mode);
		$i = $#args;
	    }
	    case "generate-versions" {
		die "[PoCC] Missing argument to snapshot" if ($i == $#args);
		my $versionfile = $args[$i + 1];
		my $filename = $args[$i + 2];
		generate_versions($versionfile, $filename);
		$i = $#args;
	    }
	    case "upgrade" {
		print "[PoCC] Upgrade to the lastest PoCC version...\n"
		my $CONFIG_DRIVER = "$BASEDIR/config/driver.cfg";
		my %config_driver = read_config_file($CONFIG_DRIVER);
		my $curmode = $config_driver{"pocc-driver"}{"configuration"};;
		if ($curmode == "devel") {
		    system("cd $BASEDIR && svn up --username lppcc --password lppcc");
		}
		else {
		    system("rsync -az http://www.cse.ohio-state.edu/~pouchet/software/pocc/download/released $BASEDIR");
		}
		$curmode = "stable" if ($curmode == "local");
		alternate($BASEDIR, $curmode);
		checkout($BASEDIR, "all");
		make($BASEDIR, $INST_PREFIX, "all", "force");
		my $ret;
		if ($curmode == "devel") {
		    $ret = system("cd $BASEDIR && CPPFLAGS=-DHAVE_POCC_DEVEL make install");
		}
		else {
		    $ret = system("cd $BASEDIR && make install");
		}
		die "[PoCC] fatal error\n" if ($ret != 0);
		$i = $#args;
	    }
	    else { print "Unknown argument: $args[$i]\n"; }
	}
    }
}


# args:
sub main
{
    parse_args (@_);
}


main(@ARGV);
