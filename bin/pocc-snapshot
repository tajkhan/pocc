#!/usr/bin/perl -w
## pocc-snapshot for pocc in /Users/pouchet
##
## Made by Louis-Noel Pouchet
## Contact: <louis-noel.pouchet@inria.fr>
##
## Started on  Tue Apr 14 17:43:47 2009 Louis-Noel Pouchet
## Last update Fri Nov 13 01:30:46 2009 Louis-Noel Pouchet
##
#
# pocc-snapshot: this file is part of the PoCC project.
#
# PoCC, the Polyhedral Compiler Collection package
#
# Copyright (C) 2009 Louis-Noel Pouchet
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1
# of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING.LESSER' file in the root directory.
#
# Author:
# Louis-Noel Pouchet <Louis-Noel.Pouchet@inria.fr>
#

use Switch;
use Term::ANSIColor;
use Time::Local;

## Some global variables.
$BDIR_MK = ".";
$CONFIGURE = "";
$DRIVER = "";

$BUILDED_LIST = "";


sub snapshot_svn
{
    my ($basedir, $mode) = @_;
    print (colored ("[PoCC-snapshot] Create SVN snapshot. This takes a while...", "green green"), "\n");
    my ($newbasedir, $snapdir) = create_snapshot($basedir, $mode, "svn");
    ## Create archive.
    my $newbasedirbase = $newbasedir;
    $newbasedir =~ s/\/$snapdir//g;
    system("rm -f $newbasedir/$snapdir.tar.gz");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    system("cd $newbasedir && tar czf $snapdir.tar.gz $snapdir");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    print (colored ("[PoCC-snapshot] Snapshot snapshots/$snapdir.tar.gz created", "green green"), "\n");
    ## Delete temporary files.
    system("rm -f $newbasedirbase/config/*.cfg");
    system("rm -f $newbasedirbase/bin/pocc-util");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
}


sub snapshot_release
{
    my ($basedir, $mode) = @_;
    print (colored ("[PoCC-snapshot] Create release snapshot. This takes a while...", "green green"), "\n");
    my $is_local = 0;
    if ($mode eq "local" || $mode eq "stable") {
	$mode = "base";
	$is_local = 1;
    }
    my $base_basedir = $basedir;
    my ($newbasedir, $snapdir) = create_snapshot($basedir, $mode, "release");
    $basedir = $newbasedir;
    ## Build PoCC.
    system("sed -e 's/POCC_MODE=\"base\";/POCC_MODE=\"$mode\";/1' $basedir/install.sh > /tmp/tmp_pocc_install.sh");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    system("mv -f /tmp/tmp_pocc_install.sh $basedir/install.sh");
    system("chmod a+x $basedir/install.sh");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    system("cd $basedir && ./install.sh");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    ## Delete temporary files.
    system("rm -f $basedir/config/*.cfg");
    system("rm -f $basedir/bin/pocc-util");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    ## Change install.sh mode to 'stable' or 'local'.
    my $lmode = "stable";
    $lmode = "local" if ($is_local == 1);
    system("sed -e 's/POCC_MODE=\"base\";/POCC_MODE=\"$lmode\";/1' $basedir/install.sh > /tmp/tmp_pocc_install.sh");
    system("mv -f /tmp/tmp_pocc_install.sh $basedir/install.sh");
    system("chmod a+x $basedir/install.sh");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    ## Make pocc distribution.
    print ("[PoCC-snapshot] Create standard distribution of PoCC\n");
    system("cd $basedir && make dist");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    ## Extract archives.
    my $poccversion = `grep AC_INIT $basedir/configure.ac | cut -d ',' -f 2`;
    $poccversion =~ s/ |\[|\]|\n//g;
    $poccversion = "pocc-$poccversion";
    print ("[PoCC-snapshot] Extract standard distribution of PoCC\n");
    system ("cd $basedir && tar xzf $poccversion.tar.gz");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    ## Create archives/ directory.
    system ("cd $basedir/$poccversion && mkdir -p archives");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    ## Retrieve data to build.
    my %config_data = read_config_file("$basedir/config/$mode/configure.cfg");
    my %config_driver = read_config_file("$basedir/config/$mode/driver.cfg");
    my %stable_driver = read_config_file("$basedir/config/$lmode/driver.cfg");
    my $softlist = $config_driver{"pocc-driver"}{"software-versions"};
    $softlist =~ s/\s+/ /g;
    $softlist =~ s/^\s//g;
    my @softs = split(/ /, $softlist);
    my $stable_softlist = $stable_driver{"pocc-driver"}{"software-versions"};
    $stable_softlist =~ s/\s+/ /g;
    $stable_softlist =~ s/^\s//g;
    my @stable_softs = split(/ /, $stable_softlist);
    my $i; my $j;
    ## For all soft, create the distribution tarball.
    for ($i = 0; $i <= $#softs; $i++) {
	my $category = $config_data{$softs[$i]}{"category"};
	$category =~ s/\s//g;
	my $module = $config_data{$softs[$i]}{"module"};
	$module =~ s/\s//g;
	my $path = $basedir . "/" . $category . "/" . $module;
	print ("[PoCC-snapshot] Create distribution of $category/$module\n");
	system("cd $path && make dist");
	die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
	my $id;
	for ($j = 0; $j <= $#stable_softs; $j++) {
	    $id = $j if ($stable_softs[$j] =~ /$softs[$i]/);
	}
	my $archivename = $stable_softs[$id] . ".tar.gz";
	system("cp $path/$archivename $basedir/$poccversion/archives");
	die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    }
    ## Create the final archive.
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
    $year += 1900;
    $mon++;
    my $date = $year . $mon . $mday;
    system("cd $basedir && mv $poccversion $poccversion-$date-full");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    system("cd $basedir && tar -czf $poccversion-$date-full.tar.gz $poccversion-$date-full");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );
    system("mv $basedir/$poccversion-$date-full.tar.gz $base_basedir/snapshots");
    die "[PoCC-snapshot] Fatal error" if ( $? != 0 );

    ## All done.
    print (colored ("[PoCC-snapshot] Release snapshots/$poccversion-$date-full.tar.gz was created", "green green"), "\n");
}


sub create_snapshot
{
    my ($basedir, $mode, $type) = @_;
    print ("[PoCC-snapshot] Checkout $mode\n");
    $version = `grep AC_INIT $basedir/configure.ac | cut -d ',' -f 2`;
    $version =~ s/ |\[|\]|\n//g;
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
    $year += 1900;
    $mon++;
    my $date = $year . $mon . $mday;
    $basedir = $basedir . "/snapshots";
    $snapdir = "pocc-$version-$date-$mode-$type";
    system("mkdir -p $basedir && cd $basedir && svn co --username lppcc --password lppcc https://alchemy.futurs.inria.fr/svn/users/pouchet/projects/pocc $snapdir\n");
    $basedir = $basedir . "/" . $snapdir;
    ## Create temporary pocc-util script.
    system("sed -e \"s!\@abs_top_srcdir\@!$basedir!1\" $basedir/bin/pocc-util.in > $basedir/bin/pocc-util");
    system("chmod a+x $basedir/bin/pocc-util");
    ## Copy mode scripts.
    system("cp $basedir/config/$mode/*.cfg $basedir/config");
    ## Update install.sh script with the mode.
    system("sed -e 's/POCC_MODE=\"base\";/POCC_MODE=\"$mode\";/1' $basedir/install.sh > /tmp/tmp_pocc_install.sh");
    system("mv -f /tmp/tmp_pocc_install.sh $basedir/install.sh");
    system("chmod a+x $basedir/install.sh");
    ## Checkout.
    system("$basedir/bin/pocc-util checkout");
    return ($basedir, $snapdir);
}


sub snapshot
{
    my ($basedir, $type, $mode) = @_;
    snapshot_svn ($basedir, $mode) if ($type eq "svn");
    snapshot_release ($basedir, $mode) if ($type eq "release");
}
