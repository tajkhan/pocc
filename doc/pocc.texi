\input texinfo

@c % /*************************************************************************
@c %  *                              PART I: HEADER                           *
@c %  *************************************************************************/
@setfilename pocc.info
@settitle PoCC - The Polyhedral Compiler Collection package

@set EDITION 0.1
@set VERSION 1.0-beta-r3
@set UPDATED November 7th 2009
@setchapternewpage odd


@c % /*************************************************************************
@c %  *                 PART II: SUMMARY DESCRIPTION AND COPYRIGHT            *
@c %  *************************************************************************/

@copying
This manual is dedicated to PoCC version @value{VERSION}, a flexible
source-to-source compiler in the polyhedral model.

Copyright @copyright{} 2009 Louis-No@"el Pouchet.

@c quotation
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.2
published by the Free Software Foundation. To receive a copy of the
GNU Free Documentation License, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
@c end quotation
@end copying

@c % /*************************************************************************
@c %  *                 PART III: TITLEPAGE, CONTENTS, COPYRIGHT              *
@c %  *************************************************************************/
@titlepage
@title PoCC
@subtitle The Polyhedral Compiler Collection package
@subtitle Edition @value{EDITION}, for PoCC @value{VERSION}
@subtitle @value{UPDATED}
@author Louis-No@"el Pouchet

@c The following two commands start the copyright page.
@page

@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@c % /*************************************************************************
@c %  *                     PART IV: TOP NODE AND MASTER MENU                 *
@c %  *************************************************************************/
@ifnottex
@node Top
@top PoCC

@insertcopying
@end ifnottex

@menu
* Introduction::
* PoCC Installation::
* The PoCC Compiler::
* Developping with PoCC::
* Troubleshoot::
@c * Hacking::
@c * Installing::
@c * Documentation::
* References::
@end menu



@c % /*************************************************************************
@c %  *                       PART V: BODY OF THE DOCUMENT                    *
@c %  *************************************************************************/

@node Introduction
@chapter Introduction

PoCC is a full compiler for polyhedral optimization. It leverages most
of the state-of-the-art polyhedral tools in the public domain, resulting
in a flexible and powerful compiler.

@*
@b{Communication}: three groups are available for subscription
@itemize
@item @uref{http://groups.google.com/group/pocc-announces,pocc-announces}, to
receive announces about releases of the software.
@item @uref{http://groups.google.com/group/pocc-users,pocc-users}, to
discuss any matter about how to use PoCC.
@item @uref{http://groups.google.com/group/pocc-dev,pocc-dev}, to
discuss any matter related to the software's implementation, bug fixes,
desired features, etc...
@end itemize
Please contact the author directly for any question.
@*

@*
@b{API Documentation}:
There is a Doxygen documentation of the API available in
@code{doc/htmldoc.tar.gz}.

@*
@b{License}: PoCC is released under the terms of the GNU Lesser General
Public License version 2.1 and later. The software it uses is released
under the terms of the GNU GPL v2 or later, and GNU Lesser GPL v2 or later.
@*

@*
@b{Acknowledgments}

PoCC could not exist without the wonderful software it includes, and its
authors diserve most of the credit.
@itemize
@item CLooG has been developped by C@'edric Bastoul and Sven Verdoolaege
@item Clan and Candl have been developped by C@'edric Bastoul and Louis-No@"el Pouchet
@item PLuTo has been developped by Uday Bondhugula
@item LetSee has been developped by Louis-No@"el Pouchet
@item PIPLib has been developped by Paul Feautrier and C@'edric Bastoul
@item PolyLib has been developped mainly by Doran Wilde, Bart Kienhuis, Vincent Loechner, Tanguy Risset and Sven Verdoolaege
@item FM has been developped by Louis-No@"el Pouchet
@end itemize
@*

@c % /*************************************************************************
@c % /*************************************************************************

@node PoCC Installation
@chapter PoCC Installation

@*
PoCC requires @code{perl} to be installed in order to
work properly. It also requires of course a Shell and a working C compiler.
@*

@*
The development version of PoCC (currently the only one being
distributed) additionally requires the standard GNU development tools:
@code{bison}, @code{flex}, reasonably recent version of
@code{libtool} (1.5.22 at least, beware of the libtool/glibtool issue on Mac OSX), @code{autoconf 2.60} or later, @code{automake 1.10} or later, @code{doxygen}, and both a
@code{subversion} and @code{git} client.
@*

@*
To install PoCC and all its components, simply do the following:
@*

@cartouche
@example
$> tar xzf pocc-@value{VERSION}.tar.gz
$> cd pocc-@value{VERSION}
$> ./install.sh
@end example
@end cartouche

@*
This will configure and build the development version of PoCC on your
system. PoCC is not aimed at being installed on the computer in one of
the standard locations (@code{/usr/bin} for instance). Instead, add the
@code{bin} directory to your PATH variable to be able to use PoCC.
@*

@cartouche
@example
$> export PATH=`pwd`/bin:$PATH
@end example
@end cartouche


@*
In the current development version, we resorted to ship a standard
version of GMP. This is required by ISL, which is required by CLooG. By
default, the configuration of GMP is automatic. To change this, for
instance because PoCC is being installed on a fake 64bits operating
system such as Mac OS 10.4, or using a 32-bit compiler on a 64 bit
architecture such as in Mac OS 10.5, modify the variable
@code{GMP_ABI_FORCE} at the beginning of @code{install.sh}. For instance
to force 32bit compilation of GMP set @code{GMP_ABI_FORCE="ABI=32"}.
@*


@*
Finally, to test that the compiler works, use the @code{gemver.c} file
at the root of the archive for a test run.
@*

@cartouche
@example
$> pocc gemver.c
@end example
@end cartouche

@*
It is @b{strongly recommended} to run the @code{make check} command, to
ensure the compiler works properly on sanity benchmarks at least.
@*

@cartouche
@example
$> make check
@end example
@end cartouche


@c % /*************************************************************************
@c % /*************************************************************************

@node The PoCC Compiler
@chapter The PoCC Compiler

This chapter describes briefly the possibilities of the PoCC compiler.


@section Input Code

@*
To delimit which part of the code is going to be compiled by the
polyhedral optimizer(s), it is required to delimit the code with
@code{#pragma scop} and @code{#pragma endscop}. For the @emph{base} and
@emph{devel} configuration of PoCC, the code fragment inside the pragmas
must be a regular static control part: a consecutive set of statements
with only for loops, where loop bounds, @code{if} statement conditionals
and array accesses are affine functions of the iterators and the global
parameters. The ternary operator can be used to provide data-dependent
code, where the control will be over-approximated to both clauses being
executed for all possible executions.
@*

@cartouche
@example
#pragma scop
    for (i = 0; i < N; i++)
        for (j = 0; j < N; j++) @{
            A[i][j] = A[i][j] + u1[i]*v1[j]
            if (N - i > 2)
               A[i][j] -= 2;
         @}
     res = A[0][0] == 0 ? u1[i] : v1[j];
#pragma endscop
@end example
@end cartouche

@*
For a better treatment of irregular program, consider the @emph{irregular}
configuration of PoCC:
@*

@cartouche
@example
$> pocc-util alternate irregular
@end example
@end cartouche

@*
This will rebuild PoCC with the irregular modules (highly
experimental). To restore to the initial configuration, do:
@*

@cartouche
@example
$> pocc-util alternate base
@end example
@end cartouche

@*
Or, if you are a development user with access to the SVN of ALCHEMY
at Inria:
@*

@cartouche
@example
$> pocc-util alternate devel
@end example
@end cartouche


@section Available Software

PoCC leverages several GNU tools for polyhedral compilation. Namely:
@itemize
@item Clan, the Chunky loop analyzer, to extract a polyhedral intermediate representation from the source code.
@item Candl, the Chunky analyzer for dependences in loops, to compute polyhedral dependences from the polyhedral IR.
@item LetSee, the Legal transformation Space explorator, for iterative compilation using affine multidimensional schedules
@item PLuTo, an automatic parallelizer and locality optimizer for multicores, for powerful optimization with tiling and parallelism in the polyhedral model
@item CLooG, the Chunky Loop Generator, to generate syntactic code from the polyhedral representation
@item PIPLib, the Parametric Integer Programming Library
@item PolyLib, the Polyhedral Library
@item FM, the Fourier-Motzkin library
@end itemize


@section Available Options

These are the available options for PoCC.

@subsection General Options
@itemize
@item @code{-h}, @code{--help} Print this help
@item @code{-v}, @code{--version} Print version information
@item @code{-o}, @code{--output <arg>} Output file [filename.pocc.c]
@item @code{--bounded-ctxt} Parser: bound all global parameters >= -1 [off]
@item @code{-d}, @code{--delete-files} Delete files previously generated by PoCC [off]
@item @code{--verbose} Verbose output [off]
@item @code{--quiet} Minimal output [off]
@end itemize

@subsection Code Generation Options

@itemize
@item @code{-n}, @code{--no-codegen} Do not generate code [off]
@item @code{--cloog-cloogf <arg>} CLooG: first level to scan [1]
@item @code{--cloog-cloogl <arg>} CLooG: last level to scan [-1]
@item @code{--codegen-timercode} Codegen: insert timer code [off]
@item @code{--codegen-timer-asm} Codegen: insert ASM timer code [off]
@item @code{-c}, @code{--compile} Compile program with C compiler [off]
@item @code{--compile-cmd <arg>} Compilation command [gcc -O3 -lm]
@item @code{--run-cmd-args <arg>} Program execution arguments []
@item @code{--prog-timeout} Timeout for compilation and execution of a single version, in second [unliminted]
@c @item --codegen-timer-papi: Codegen: insert PAPI timer code [off]
@end itemize


@*
For instance, to perform a full compilation and create a binary, type:
@*

@cartouche
@example
$> pocc --compile gemver.c -o gemver
@end example
@end cartouche

@subsection Optimization Options

@*
About LetSee:
@*
@itemize
@item @code{-l}, @code{--letsee} Optimize with LetSee [off]
@item @code{--letsee-space <arg>} search space: [precut], schedule
@item @code{--letsee-walk <arg>} traversal heuristic: [exhaust], random, skip, m1, dh
@item @code{--letsee-dry-run} Don't compile and run programs for iterative search [off]
@item @code{--letsee-bounds} search space bounds [-1,1,-1,1,-1,1]
@item @code{--letsee-normspace} normalize search space [off]
@item @code{--letsee-mode-m1 <arg>} scheme for M1 traversal [i+p,i,0]
@item @code{--letsee-rtries <arg>} number of random draws [50]
@item @code{--letsee-prune-precut} prune precut space
@item @code{--letsee-backtrack} allow bactracking in schedule mode
@end itemize

@*
About PLuTo:
@*
@itemize
@item @code{-p}, @code{--pluto} Optimize with PLuTo [off]
@item @code{--pluto-parallel} OpenMP parallelization [off]
@item @code{--pluto-tile} polyhedral tiling [off]
@item @code{--pluto-l2tile} perform L2 tiling [off]
@item @code{--pluto-fuse <arg>} fusion heuristic: nmaxfuse, [smartfuse], nofuse
@item @code{--pluto-unroll} unroll loops [off]
@item @code{--pluto-ufactor <arg>} unrolling factor [4]
@item @code{--pluto-polyunroll} polyhedral unrolling [off]
@item @code{--pluto-prevector} perform prevectorization [off]
@item @code{--pluto-multipipe} multipipe [off]
@item @code{--pluto-rar} consider RAR dependences [off]
@item @code{--pluto-lastwriter} perform lastwriter dep. simp. [off]
@item @code{--pluto-scalpriv} perform scalar privatization [off]
@item @code{--pluto-bee} use Bee [off]
@item @code{--pluto-quiet} be quiet [off]
@item @code{--pluto-ft} ft [off]
@item @code{--pluto-lt} lt [off]
@end itemize

@*
For instance, to perform tiling with the Tiling Hyperplane method of
Bondhugula et al, type:
@*
@cartouche
@example
$> pocc --pluto-tile gemver.c
@end example
@end cartouche

@*

As a more complicated example, let us consider the precut (aka fusion
structure) method. To compute (without executing) the number of points
in the search space for @code{gemver.c} type:
@*

@cartouche
@example
$> pocc ---letsee --verbose --no-codegen  gemver.c

[...]
[LetSee] Generated 0 fusion structures from 8 schedules
[...]
@end example
@end cartouche

@*
To perform 5 random tests in the space of legal fusion structures for
@code{gemver.c}, together with tiling and parallelization activated,
type:
@*

@cartouche
@example
$> pocc --compile-cmd "gcc -O3 -fopenmp" --letsee-walk random \
--letsee-rtries 5 --pluto-tile --pluto-parallel --codegen-timercode gemver.c
@end example
@end cartouche



@c % /*************************************************************************
@c % /*************************************************************************

@node Developping with PoCC
@chapter Developping with PoCC


@*
This chapter describes briefly how to program in PoCC. As a kicker
example, we will create a new mode for PoCC (such as base, devel and
irregular) named @emph{cuda}. We will then add a new module into the
toolchain, named @emph{cudascheduler}. We also discuss at the end various
tips and tricks for the compilation toolchain.
@*

@section Create a new Mode for PoCC

@*
To create a new mode for pocc, named cuda, one can do the following. The
idea is to create a configuration based on the @b{devel} mode. At start,
we simply duplicate this configuration.

@cartouche
@example
$> mkdir config/cuda
$> cp config/devel/* config/cuda
$> emacs config/cuda/driver.cfg
   change the line "configuration: devel" to "configuration: cuda"
$> pocc-util alternate cuda
@end example
@end cartouche

The last step, @code{pocc-util alternate cuda} recompiles everything, and
should work fluently.
@*

@section Create and use a new module

@*
We now want to create a new module, @emph{cudascheduler}. This module will
compute a transformation for the program in the form of an affine
schedule. Hence it is categorized as an optimizer.
@*

@subsection Create the new module from scratch

@*
To comply with standard GNU application template, we recommend to use
@code{autoskelet-0.1} (can be downloaded from
@uref{http://www-rocq.inria.fr/~pouchet, L.N. Pouchet
website}). Download and extract the archive, and go to the directory
autoskelet-0.1. Then do the following.

@itemize
@item Create a NOTICE file for the project, @code{NOTICE.cuda} for instance. This will be the header for all generated files. Beware to use the string @code{FILENAME} as is, it will be automatically substituted by the actual filename during  the project generation. Inspire yourself from @code{NOTICE} for GPL v2 projects and @code{NOTICE.LESSER} for LGPL v3 projects.
@item Create the project:

@cartouche
@example
$> ./make_project.sh cudascheduler /full/path/to/pocc/optimizers/cudascheduler
templates/project_bin_static_shared NOTICE.cuda
@end example
@end cartouche

@item Perform final edits (@code{AUTHORS}, etc.)
@item We heavily recommand to store the module on a SVN or Git repository. Currently PoCC supports only module stored as svn or git repositories, and as @code{.tar.gz} archives on a local location
@end itemize
@*

@subsection Insert the new module in the toolchain

@*
First, add the information about the configuration of the new module
into the @code{config/cuda/configure.cfg} file, which stores the
specifics for building all modules. A working template is the following,
which adds the module @code{cudascheduler} located on a SVN repository,
and depending on the @code{scoplib}. Note we do not have yet implemented
the support of the @code{--with-scoplib} option in our module, still we
can proceed.

@cartouche
@example
[cudascheduler]
category: optimizers
module: cudascheduler
location: https://alchemy.futurs.inria.fr/svn/users/....
retrieve-method: svn
bootstrap: bootstrap.sh
configure: --with-scoplib=$poccsrcdir/ir/install-scoplib
make-depends: scoplib
@end example
@end cartouche

Refer to @code{configure.cfg} for more information. @code{$poccsrcdir}
is automatically substituted with the absolute path of the PoCC
compiler. Also, a module named @code{xxx} is automatically installed in
the directory @code{install-xxx}.

@*
Second, inform the driver that it needs the new module to be part of the
build chain, by editing @code{config/cuda/driver.cfg} and adding
@code{cudascheduler} in the @code{software-versions} list. Finally,
recompile PoCC.

@cartouche
@example
$> pocc-util alternate cuda
@end example
@end cartouche

At this stage, it should still work fluently.
@*

@subsection Editing the new module

@*
Now you can start your modifications of the project. For instance,
adding the code to manage the @code{--with-scoplib} option for the
configure script is a good idea. One could for instance refer to @code{generators/cloog/configure.in} file, or directly add the following code fragment into @code{optimizers/cudascheduler/configure.ac}.

@cartouche
@example
dnl /********************************************************************
dnl  *                       Where is ScopLib?                          *
dnl  ********************************************************************/

dnl Offer --with-scoplib.
  AC_ARG_WITH(scoplib,
	      AC_HELP_STRING([--with-scoplib=DIR],
              	             [DIR Location of ScopLib package]),
              [with_scoplib=$withval;
	       CPPFLAGS="$@{CPPFLAGS@} -I$withval/include";
	       LDFLAGS="$@{LDFLAGS@} -L$withval/lib"
	      ],
              [with_scoplib=check])
dnl Check for scoplib existence.
  AS_IF([test "x$with_scoplib" != xno],
	[AC_CHECK_LIB([scoplib], [scoplib_scop_read],
	 [LIBS="-lscoplib $LIBS";
	 DEFINE_HAS_SCOPLIB_LIB="-DCUDASCHED_SUPPORTS_SCOPLIB"
	 ],
         [DEFINE_HAS_SCOPLIB_LIB=""
  	  if test "x$with_scoplib" != xcheck; then
           AC_MSG_FAILURE([Test for ScopLib failed. \
Use --with-scoplib to specify libscoplib path.])
          fi
         ])
	])
AC_SUBST(DEFINE_HAS_SCOPLIB_LIB)
@end example
@end cartouche
@*


@*
You do not longer need to run pocc-util alternate to compile, just do
@cartouche
@example
$> cd optimizers/cudascheduler && make install; cd -
@end example
@end cartouche

The @code{make install} command directly into the @code{cudascheduler}
  module should bootstrap/reconfigure/make/install automatically when
  needed.
@*


@subsection Activating the new pass into PoCC

@*
First, create an option in the option list.
@itemize
@item Edit @code{driver/pocc/include/pocc/options.h} and add a variable storing the option value.
@item Edit @code{driver/pocc/options.c} and add management (initialization / cleaning) code for this new option
@item Edit @code{driver/src/options.h} and add a new defined value for the new option, for instance @code{#define POCC_OPT_CUDASCHEDULER 43}. Don't forget to increment the @code{POCC_NB_OPTS} define.
@item Edit @code{driver/src/options.c} and update the structure @code{opts} at the beginning of the file. Beware to insert the new option management @b{at the position defined in @code{options.h}}. Add the code to read the option value in the @code{pocc_getopts} function.
@end itemize
@*

@*
Second, update build information with the new module, and create a new file for the new pass.
@itemize
@item Edit @code{driver/pocc/Makefile.am} and update the @code{INCLUDE} variable with the following:
@cartouche
@example
	-I$(top_builddir)/optimizers/install-cudascheduler/include	\
	-I$(top_srcdir)/optimizers/install-cudascheduler/include	\
@end example
@end cartouche

Also edit the @code{libpocc_la_LIBADD} variable and add
@cartouche
@example
$(top_builddir)/optimizers/install-cudascheduler/lib/libcudascheduler.la \
@end example
@end cartouche

@item Create a new file to manage the new pass, for instance @code{driver/pocc/driver-cudascheduler.c}. Do not forget to add this new file in the @code{libpocc_la_SOURCES} variable of @code{driver/pocc/Makefile.am}. You are strongly encouraged to add also a dedicated header file @code{driver/pocc/include/pocc/driver-cudascheduler.c}.
@item Call the module exported function the way you want...
@end itemize
@*

@*
Lastly, update PoCC driver to call the new pass. Don't forget to use the option we have created before.
@itemize
@item Edit @code{driver/src/pocc.c} and call the exported function of your driver. Don't forget to add the header file of this new pass into the list of included files of @code{driver/src/pocc.c}.
@end itemize
@*

@*
And you are done. Enjoy your development now!
@*

@section Development tips and tricks

@*
You want to change the configure script options for cudascheduler:

@cartouche
@example
$> emacs config/cuda/configure.cfg, do your changes
$> rm optimizers/cudascheduler/configure
$> pocc-util alternate cuda
@end example
@end cartouche
@*

@*
You want to build the whole project (but no modif were made to
config/cuda/*) in the safest fashion:

@cartouche
@example
$> pocc-util alternate cuda
@end example
@end cartouche
@*

@*
You have modified something in @code{optimizers/cudascheduler}, but not elsewhere

@cartouche
@example
$> cd optimizers/cudascheduler && make install; cd -
@end example
@end cartouche
@*

@*
You have modified something in @code{optimizers/cudascheduler} and in
@code{driver/} only:

@cartouche
@example
$> cd optimizers/cudascheduler && make install; cd -
$> make install
@end example
@end cartouche
@*

@*
You have modified some modules and/or the driver, but not the configuration:

@cartouche
@example
$> pocc-util buildall
@end example
@end cartouche

@*

@*
You want to work only on one module (possibly just added in
@code{mode/configure.cfg}) and use the PoCC tools to checkout and
compile it:

@cartouche
@example
$> pocc-util checkout mymodule
$> pocc-util make mymodule
@end example
@end cartouche

@*

@c % /*************************************************************************
@c % /*************************************************************************

@node Troubleshoot
@chapter Troubleshoot

@section Build error during the first installation

@*
The most common problem arises with the compilation of
GMP. Unfortunately the problem occurs only when reaching the compilation
of CLooG, which makes it hard to diagnose.

It has been
reported that for Mac OS 10.4, and for Mac OS 10.5 and later @emph{using
the 32-bit native Apple-GCC compiler} that the compilation of GMP must
be forced to 32 bits. To do do:
@itemize
@item Delete the @code{math/external/gmp-4.3.1} directory
@item Edit @code{install.sh} and set @code{GMP_ABI_FORCE="ABI=32"}
@item Re-run install.sh
@end itemize
@*

@*
It has also been reported once a problem of a missing include
@code{<gmp.h>}. If you face this problem a quick-and-dirty solution is
to copy @code{math/external/install/include/gmp.h} into
@code{generators/install-cloog/include}. Please also report the problem
to the author
@uref{mailto:louis-noel.pouchet@@inria.fr,louis-noel.pouchet@@inria.fr}.
@*

@section Other problems

@*
The most usual problem comes from software dependences not met, in particular software versions. Refer to the beginning of this manual to ensure you have recent-enough software version.
@*

@*
Simply contact the author for the moment:
@uref{mailto:louis-noel.pouchet@@inria.fr,louis-noel.pouchet@@inria.fr}

Please provide the output of the following commands:

@cartouche
@example
$> uname -a
$> gcc -v
$> libtool --version
$> automake --version
$> autoconf --version
$> flex --version
$> bison --version
$> git --version
$> svn --version
@end example
@end cartouche


@*


@c % /*************************************************************************
@c %  *************************************************************************/

@node References
@chapter References

@c @itemize
@c @item
@table @asis
@item @anchor{bastoul.04.pact}@b{[1]}
C@'edric Bastoul. Code Generation in the Polyhedral Model Is Easier Than
You Think. In @emph{IEEE International Conference on Parallel
Architecture and Compilation Techniques (PACT'04)}, pp 7--16,
Juan-les-Pins, France, September 2004.

@item @anchor{bondhugula.08.pldi}@b{[2]}
Uday Bondhugula and Albert Hartono and J. Ramanujam and P. Sadayappan. A
Practical Automatic Polyhedral Program Optimization System. In @emph{ACM
SIGPLAN Conference on Programming Language Design and Implementation
(PLDI'08)}, ACM Press, Tucson, Arizona, June 2008.

@item @anchor{feautrier.98.rairo}@b{[3]}
Paul Feautrier. Parametric Integer Programming. In @emph{RAIRO Recherche
op@'erationnelle}, Vol 22, num 3, pp 243--268, 1998.

@c @item
@c @noindent
@item @anchor{pouchet.08.pldi}@b{[4]}
Louis-No@"el Pouchet, C@'edric
Bastoul, Albert Cohen and John Cavazos. Iterative optimization in the
polyhedral model: Part II, multidimensional time. In @emph{ACM SIGPLAN
Conference on Programming Language Design and Implementation
(PLDI'08)}, pp 90--100, ACM Press, Tucson, Arizona, June 2008.

@item @anchor{wilde.00.jpaa}@b{[5]}
Doran Wilde. A library for doing polyhedral operations. In @emph{Journal
of Parallel Algorithms and Applications}, Vol 15, pp 137--166, 2000.

@end table
@c @end itemize


@c % /*************************************************************************
@c %  *                       PART VI: END OF THE DOCUMENT                    *
@c %  *************************************************************************/
@c @unnumbered Index

@c @printindex cp

@bye
