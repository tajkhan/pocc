\input texinfo

@c % /*************************************************************************
@c %  *                              PART I: HEADER                           *
@c %  *************************************************************************/
@setfilename pocc.info
@settitle PoCC - The Polyhedral Compiler Collection package

@set EDITION 0.1
@set VERSION 0.1.0
@set UPDATED April 27th 2009
@setchapternewpage odd


@c % /*************************************************************************
@c %  *                 PART II: SUMMARY DESCRIPTION AND COPYRIGHT            *
@c %  *************************************************************************/

@copying
This manual is dedicated to PoCC version @value{VERSION}, a flexible
source-to-source compiler in the polyhedral model.

Copyright @copyright{} 2009 Louis-No@"el Pouchet.

@c quotation
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.2 
published by the Free Software Foundation. To receive a copy of the
GNU Free Documentation License, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
@c end quotation
@end copying

@c % /*************************************************************************
@c %  *                 PART III: TITLEPAGE, CONTENTS, COPYRIGHT              *
@c %  *************************************************************************/
@titlepage
@title PoCC
@subtitle The Polyhedral Compiler Collection package
@subtitle Edition @value{EDITION}, for PoCC @value{VERSION}
@subtitle @value{UPDATED}
@author Louis-No@"el Pouchet
     
@c The following two commands start the copyright page.
@page

@vskip 0pt plus 1filll
@insertcopying
@end titlepage
     
@c Output the table of contents at the beginning.
@contents

@c % /*************************************************************************
@c %  *                     PART IV: TOP NODE AND MASTER MENU                 *
@c %  *************************************************************************/
@ifnottex
@node Top
@top PoCC
     
@insertcopying
@end ifnottex

@menu
* Introduction::
* PoCC Installation::
* The PoCC Compiler::
* Developping with PoCC::
* Troubleshoot::
@c * Hacking::
@c * Installing::
@c * Documentation::
* References::
@end menu
 


@c % /*************************************************************************
@c %  *                       PART V: BODY OF THE DOCUMENT                    *
@c %  *************************************************************************/

@node Introduction
@chapter Introduction

PoCC is a full compiler for polyhedral optimization. It leverages most
of the state-of-the-art polyhedral tools in the public domain, resulting
in a flexible compiler.

@*
@b{Communication}: one group is available for subscription
@uref{http://groups.google.com/group/pocc-announce,pocc-announce}, to
receive announces about releases of the software.  Please contact the
author directly for any question.
@*

@*
@b{API Documentation}:
There is a Doxygen documentation of the API available in
@code{doc/htmldoc.tar.gz}.

@* 
@b{License}: PoCC is released under the terms of the GNU General
Public License version 2 and later. The software it uses is released
under the terms of the GNU GPL v2 or GNU Lesser GPL v3.
@*

@*
@b{Acknowledgments} 

PoCC could not exist without the wonderful software it includes, and its
authors diserve most of the credit.
@itemize 
@item CLooG has been developped by C@'edric Bastoul and Sven Verdoolaege
@item Clan and Candl have been developped by C@'edric Bastoul and Louis-No@"el Pouchet
@item PLuTo has been developped by Uday Bondhugula
@item LetSee has been developped by Louis-No@"el Pouchet
@item PIPLib has been developped by Paul Feautrier and C@'edric Bastoul
@item PolyLib has been developped mainly by Doran Wilde, Bart Kienhuis, Vincent Loechner, and Tanguy Risset
@item FM has been developped by Louis-No@"el Pouchet
@end itemize
@*

@c % /*************************************************************************
@c % /*************************************************************************

@node PoCC Installation
@chapter PoCC Installation

@*
PoCC requires @code{bison} and @code{flex} to be installed in order to
work properly. It also requires a reasonably recent version of
@code{libtool} (1.5.22 at least), and, of course, a working C compiler.
@*

@*
The development version of PoCC (currently the only one being
distributed) additionally requires the standard GNU development tools:
@code{autoconf 2.60}, @code{automake 1.10}, @code{doxygen}, and both a
@code{subversion} and @code{git} client.
@*

@*
To install PoCC and all its components, simply do the following:
@*

@cartouche
@example
$> tar xzf pocc-@value{VERSION}.tar.gz
$> cd pocc-@value{VERSION}
$> ./install.sh
@end example
@end cartouche

@*
This will configure and build the development version of PoCC on your
system. PoCC is not aimed at being installed on the computer in one of
the standard locations (@code{/usr/bin} for instance). Instead, add the
@code{bin} directory to your PATH variable to be able to use PoCC.
@*

@cartouche
@example
$> export PATH=`pwd`/bin:$PATH
@end example
@end cartouche



@*
Finally, to test that the compiler works, use the @code{gemver.c} file
at the root of the archive for a test run.  
@*

@cartouche
@example
$> pocc gemver.c
@end example
@end cartouche

@c % /*************************************************************************
@c % /*************************************************************************

@node The PoCC Compiler
@chapter The PoCC Compiler

This chapter describes briefly the possibilities of the PoCC compiler.


@section Input Code

@*
To delimit which part of the code is going to be compiled by the
polyhedral optimizer(s), it is required to delimit the code with
@code{#pragma scop} and @code{#pragma endscop}. For the @emph{base} and
@emph{devel} configuration of PoCC, the code fragment inside the pragmas
must be a regular static control part: a consecutive set of statements
with only for loops, where loop bounds, @code{if} statement conditionals
and array accesses are affine functions of the iterators and the global
parameters. The ternary operator can be used to provide data-dependent
code.
@*

@cartouche
@example
#pragma scop
    for (i = 0; i < N; i++)
        for (j = 0; j < N; j++) @{
            A[i][j] = A[i][j] + u1[i]*v1[j]
            if (N - i > 2)
               A[i][j] -= 2;
         @}
     res = A[0][0] == 0 ? u1[i] : v1[j];
#pragma endscop
@end example
@end cartouche

@*
For a better treatment of irregular program, consider the @emph{irregular}
configuration of PoCC:
@*

@cartouche
@example
$> pocc-util alternate irregular
@end example
@end cartouche

@*
This will rebuild PoCC with the irregular modules (highly
experimental). To restore to the initial configuration, do:
@*

@cartouche
@example
$> pocc-util alternate base
@end example
@end cartouche

@* 
Or, if you are a development user with access to the SVN of ALCHEMY
at Inria:
@*

@cartouche
@example
$> pocc-util alternate devel
@end example
@end cartouche


@section Available Software

PoCC leverages several GNU tools for polyhedral compilation. Namely:
@itemize
@item Clan, the Chunky loop analyzer, to extract a polyhedral intermediate representation from the source code.
@item Candl, the Chunky analyzer for dependences in loops, to compute polyhedral dependences from the polyhedral IR.
@item LetSee, the Legal transformation Space explorator, for iterative compilation using affine multidimensional schedules
@item PLuTo, an automatic parallelizer and locality optimizer for multicores, for powerful optimization with tiling and parallelism in the polyhedral model
@item CLooG, the Chunky Loop Generator, to generate syntactic code from the polyhedral representation
@item PIPLib, the Parametric Integer Programming Library
@item PolyLib, the Polyhedral Library
@item FM, the Fourier-Motzkin library
@end itemize


@section Available Options

These are the available options for PoCC.

@subsection General Options
@itemize
@item @code{-h}, @code{--help} Print this help
@item @code{-v}, @code{--verbose} Verbose output [off]
@item @code{-o}, @code{--output} Output file [filename.pocc.c]
@item @code{-c}, @code{--compile} Compilation command [gcc -O3 -lm]
@end itemize

@*
For instance, to perform a full compilation and create a binary, type:
@*

@cartouche
@example
$> pocc --compile "gcc -O3" gemver.c -o gemver
@end example
@end cartouche

@subsection Optimization Options

@*
About LetSee:
@*
@itemize
@item @code{-l}, @code{--letsee} Optimize with LetSee [off] 
@item @code{--letsee-searchspace} search space: [precut], schedule 
@item @code{--letsee-traversal} traversal heuristic: [exhaust], random, skip, m1, dh 
@item @code{--letsee-normspace} normalize search space [off] 

@item @code{--letsee-scheme-m1} scheme for M1 traversal [i+p,i,0] 
@item @code{--letsee-rtries} number of random draws [50] 
@item @code{--letsee-prune-precut} prune precut space 
@item @code{--letsee-backtrack} allow bactracking in schedule mode\n 
@end itemize

@*
About PLuTo:
@*
@itemize
@item @code{-p}, @code{--pluto} Optimize with PLuTo [off] 
@item @code{--pluto-parallel} OpenMP parallelization [off] 
@item @code{--pluto-tile} polyhedral tiling [off] 
@item @code{--pluto-l2tile} perform L2 tiling [off] 
@item @code{--pluto-fuse} fusion heuristic: nmaxfuse, [smartfuse], nofuse 
@item @code{--pluto-unroll} unroll loops [off] 
@item @code{--pluto-ufactor} unrolling factor [4] 
@item @code{--pluto-polyunroll} polyhedral unrolling [off] 
@item @code{--pluto-prevector} perform prevectorization [off] 
@item @code{--pluto-multipipe} multipipe [off] 
@item @code{--pluto-rar} consider RAR dependences [off] 
@item @code{--pluto-lastwriter} perform lastwriter dep. simp. [off] 
@item @code{--pluto-scalpriv} perform scalar privatization [off] 
@item @code{--pluto-bee} use Bee [off] 
@item @code{--pluto-quiet} be quiet [off] 
@item @code{--pluto-ft} ft [off] 
@item @code{--pluto-lt} lt [off]
@end itemize

@* 
For instance, to perform tiling with the Tiling Hyperplane method of
Bondhugula et al, type:
@* 
@cartouche
@example
$> pocc -v --pluto-tile gemver.c
@end example
@end cartouche

@* 
As a more complicated example, to perform 5 random tests in the space
of legal fusion structures for @code{gemver.c}, together with tiling and
parallelization activated, type: 
@*

@cartouche
@example
$> pocc --compile "gcc -O3 -fopenmp" --letsee-traversal random \
--letsee-rtries 5 --pluto-tile --pluto-parallel  gemver.c
@end example
@end cartouche

@subsection Code Generation Options

@itemize 
@item @code{-n}, @code{--no-codegen} Do not generate code [off] 
@item @code{--cloog-cloogf} CLooG: first level to scan [1] 
@item @code{--cloog-cloogl} CLooG: last level to scan [-1] 
@item @code{--codegen-timercode} Codegen: insert timer code [off] 
@item @code{--codegen-timer-asm} Codegen: insert ASM timer code [off] 
@c @item --codegen-timer-papi: Codegen: insert PAPI timer code [off] 
@end itemize



@c % /*************************************************************************
@c % /*************************************************************************

@node Developping with PoCC
@chapter Developping with PoCC


This chapter describes briefly how to program in PoCC.


@c % /*************************************************************************
@c % /*************************************************************************

@node Troubleshoot
@chapter Troubleshoot





@c % /*************************************************************************
@c %  *************************************************************************/

@node References
@chapter References

@c @itemize
@c @item
@table @asis
@item @anchor{bastoul.04.pact}@b{[1]} 
C@'edric Bastoul. Code Generation in the Polyhedral Model Is Easier Than
You Think. In @emph{IEEE International Conference on Parallel
Architecture and Compilation Techniques (PACT'04)}, pp 7--16,
Juan-les-Pins, France, September 2004.

@item @anchor{bondhugula.08.pldi}@b{[2]} 
Uday Bondhugula and Albert Hartono and J. Ramanujam and P. Sadayappan. A
Practical Automatic Polyhedral Program Optimization System. In @emph{ACM
SIGPLAN Conference on Programming Language Design and Implementation
(PLDI'08)}, ACM Press, Tucson, Arizona, June 2008.

@item @anchor{feautrier.98.rairo}@b{[3]} 
Paul Feautrier. Parametric Integer Programming. In @emph{RAIRO Recherche
op@'erationnelle}, Vol 22, num 3, pp 243--268, 1998.

@c @item
@c @noindent
@item @anchor{pouchet.08.pldi}@b{[4]} 
Louis-No@"el Pouchet, C@'edric
Bastoul, Albert Cohen and John Cavazos. Iterative optimization in the
polyhedral model: Part II, multidimensional time. In @emph{ACM SIGPLAN
Conference on Programming Language Design and Implementation
(PLDI'08)}, pp 90--100, ACM Press, Tucson, Arizona, June 2008.

@item @anchor{wilde.00.jpaa}@b{[5]} 
Doran Wilde. A library for doing polyhedral operations. In @emph{Journal
of Parallel Algorithms and Applications}, Vol 15, pp 137--166, 2000.

@end table
@c @end itemize


@c % /*************************************************************************
@c %  *                       PART VI: END OF THE DOCUMENT                    *
@c %  *************************************************************************/
@c @unnumbered Index
     
@c @printindex cp
     
@bye
